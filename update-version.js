#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π CSS —Ñ–∞–π–ª–æ–≤
// –ó–∞–ø—É—Å–∫: node update-version.js

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
function generateVersion() {
    const now = new Date();
    const version = `${now.getFullYear()}${(now.getMonth() + 1).toString().padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}.${now.getHours().toString().padStart(2, '0')}${now.getMinutes().toString().padStart(2, '0')}`;
    return version;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ —Ñ–∞–π–ª–µ
function updateVersionInFile(filePath, newVersion) {
    try {
        let content = fs.readFileSync(filePath, 'utf8');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ CSS —Ñ–∞–π–ª–æ–≤
        content = content.replace(
            /href="([^"]*\.css)(\?v=[^"]*)?"/g,
            `href="$1?v=${newVersion}"`
        );
        
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ version-cache.js
function updateVersionInJS(newVersion) {
    const jsFilePath = path.join(__dirname, 'assets', 'js', 'version-cache.js');
    
    try {
        let content = fs.readFileSync(jsFilePath, 'utf8');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º currentVersion –≤ JS —Ñ–∞–π–ª–µ
        content = content.replace(
            /const currentVersion = '[^']*'/,
            `const currentVersion = '${newVersion}'`
        );
        
        fs.writeFileSync(jsFilePath, content, 'utf8');
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω version-cache.js`);
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ version-cache.js:`, error.message);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π CSS —Ñ–∞–π–ª–æ–≤...\n');
    
    const newVersion = generateVersion();
    console.log(`üì¶ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${newVersion}\n`);
    
    // –°–ø–∏—Å–æ–∫ HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const htmlFiles = [
        'index.html',
        'pages/htmlpage.html',
        'pages/csspage.html',
        'pages/javascriptpage.html',
        'pages/quiz.html'
    ];
    
    let successCount = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
    htmlFiles.forEach(file => {
        const filePath = path.join(__dirname, file);
        if (fs.existsSync(filePath)) {
            if (updateVersionInFile(filePath, newVersion)) {
                successCount++;
            }
        } else {
            console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`);
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º version-cache.js
    if (updateVersionInJS(newVersion)) {
        successCount++;
    }
    
    console.log(`\n‚ú® –ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${successCount}`);
    console.log(`üìù –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è CSS: ${newVersion}`);
    console.log('\nüí° –¢–µ–ø–µ—Ä—å CSS —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π, –º–∏–Ω—É—è –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞.');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main();
}

module.exports = { updateVersionInFile, generateVersion }; 