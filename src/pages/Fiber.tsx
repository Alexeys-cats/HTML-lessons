import { useState, useEffect } from 'react';
import ReacktImg from '../../public/ReacktImg.png';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Fiber
const FiberDemo = () => {
  const [fiberNodes, setFiberNodes] = useState([
    {
      id: 1,
      type: 'div',
      state: 'completed',
      priority: 'normal',
      workInProgress: false,
    },
    {
      id: 2,
      type: 'h1',
      state: 'completed',
      priority: 'normal',
      workInProgress: false,
    },
    {
      id: 3,
      type: 'p',
      state: 'completed',
      priority: 'normal',
      workInProgress: false,
    },
    {
      id: 4,
      type: 'span',
      state: 'pending',
      priority: 'low',
      workInProgress: false,
    },
  ]);
  const [currentWork, setCurrentWork] = useState<number | null>(null);
  const [isWorking, setIsWorking] = useState(false);
  const [showDetails, setShowDetails] = useState(false);
  const [currentBatch, setCurrentBatch] = useState<string[]>([]);
  const [batchHistory, setBatchHistory] = useState<
    Array<{ batch: string[]; priority: string; completed: number }>
  >([]);

  const startWork = () => {
    setIsWorking(true);
    setBatchHistory([]);
    setCurrentBatch([]);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    const pendingNodes = fiberNodes.filter((node) => node.state === 'pending');
    const groupedByPriority = {
      immediate: pendingNodes.filter((n) => n.priority === 'immediate'),
      userBlocking: pendingNodes.filter((n) => n.priority === 'userBlocking'),
      high: pendingNodes.filter((n) => n.priority === 'high'),
      normal: pendingNodes.filter((n) => n.priority === 'normal'),
      low: pendingNodes.filter((n) => n.priority === 'low'),
      idle: pendingNodes.filter((n) => n.priority === 'idle'),
    };

    const processBatch = (
      priority: string,
      nodes: Array<{
        id: number;
        type: string;
        state: string;
        priority: string;
        workInProgress: boolean;
      }>
    ) => {
      if (nodes.length === 0) return;

      setCurrentBatch(nodes.map((n) => `${n.type} (ID: ${n.id})`));

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —É–∑–ª—ã –≤ –±–∞—Ç—á–µ
      let completedCount = 0;
      nodes.forEach((node, index) => {
        setTimeout(() => {
          setCurrentWork(node.id);
          setFiberNodes((prevNodes) =>
            prevNodes.map((n) =>
              n.id === node.id
                ? { ...n, state: 'working', workInProgress: true }
                : n
            )
          );

          // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —É–∑–ª–æ–º
          setTimeout(() => {
            setFiberNodes((prevNodes) =>
              prevNodes.map((n) =>
                n.id === node.id
                  ? { ...n, state: 'completed', workInProgress: false }
                  : n
              )
            );
            completedCount++;

            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–∑–µ–ª –≤ –±–∞—Ç—á–µ
            if (completedCount === nodes.length) {
              setBatchHistory((prev) => [
                ...prev,
                {
                  batch: nodes.map((n) => `${n.type} (ID: ${n.id})`),
                  priority,
                  completed: nodes.length,
                },
              ]);
              setCurrentBatch([]);
              setCurrentWork(null);

              // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
              const priorities = [
                'immediate',
                'userBlocking',
                'high',
                'normal',
                'low',
                'idle',
              ];
              const currentIndex = priorities.indexOf(priority);
              const nextPriority = priorities[currentIndex + 1];

              if (
                nextPriority &&
                groupedByPriority[
                  nextPriority as keyof typeof groupedByPriority
                ].length > 0
              ) {
                setTimeout(
                  () =>
                    processBatch(
                      nextPriority,
                      groupedByPriority[
                        nextPriority as keyof typeof groupedByPriority
                      ]
                    ),
                  500
                );
              } else {
                setIsWorking(false);
              }
            }
          }, 800);
        }, index * 300);
      });
    };

    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const priorities = [
      'immediate',
      'userBlocking',
      'high',
      'normal',
      'low',
      'idle',
    ];
    for (const priority of priorities) {
      const nodes =
        groupedByPriority[priority as keyof typeof groupedByPriority];
      if (nodes.length > 0) {
        processBatch(priority, nodes);
        break;
      }
    }
  };

  const addHighPriorityWork = () => {
    const newId = Math.max(...fiberNodes.map((n) => n.id)) + 1;
    setFiberNodes((prev) => [
      ...prev,
      {
        id: newId,
        type: 'button',
        state: 'pending',
        priority: 'high',
        workInProgress: false,
      },
    ]);
  };

  const addLowPriorityWork = () => {
    const newId = Math.max(...fiberNodes.map((n) => n.id)) + 1;
    setFiberNodes((prev) => [
      ...prev,
      {
        id: newId,
        type: 'div',
        state: 'pending',
        priority: 'low',
        workInProgress: false,
      },
    ]);
  };

  const addImmediateWork = () => {
    const newId = Math.max(...fiberNodes.map((n) => n.id)) + 1;
    setFiberNodes((prev) => [
      ...prev,
      {
        id: newId,
        type: 'input',
        state: 'pending',
        priority: 'immediate',
        workInProgress: false,
      },
    ]);
  };

  const addUserBlockingWork = () => {
    const newId = Math.max(...fiberNodes.map((n) => n.id)) + 1;
    setFiberNodes((prev) => [
      ...prev,
      {
        id: newId,
        type: 'button',
        state: 'pending',
        priority: 'userBlocking',
        workInProgress: false,
      },
    ]);
  };

  const addNormalWork = () => {
    const newId = Math.max(...fiberNodes.map((n) => n.id)) + 1;
    setFiberNodes((prev) => [
      ...prev,
      {
        id: newId,
        type: 'div',
        state: 'pending',
        priority: 'normal',
        workInProgress: false,
      },
    ]);
  };

  const addIdleWork = () => {
    const newId = Math.max(...fiberNodes.map((n) => n.id)) + 1;
    setFiberNodes((prev) => [
      ...prev,
      {
        id: newId,
        type: 'span',
        state: 'pending',
        priority: 'idle',
        workInProgress: false,
      },
    ]);
  };

  const resetWork = () => {
    setFiberNodes([
      {
        id: 1,
        type: 'div',
        state: 'completed',
        priority: 'normal',
        workInProgress: false,
      },
      {
        id: 2,
        type: 'h1',
        state: 'completed',
        priority: 'normal',
        workInProgress: false,
      },
      {
        id: 3,
        type: 'p',
        state: 'completed',
        priority: 'normal',
        workInProgress: false,
      },
      {
        id: 4,
        type: 'span',
        state: 'pending',
        priority: 'low',
        workInProgress: false,
      },
    ]);
    setCurrentWork(null);
    setIsWorking(false);
    setCurrentBatch([]);
    setBatchHistory([]);
  };

  const getStateColor = (state: string) => {
    switch (state) {
      case 'completed':
        return 'bg-green-500';
      case 'pending':
        return 'bg-yellow-500';
      case 'working':
        return 'bg-blue-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'immediate':
        return 'text-red-700 bg-red-100';
      case 'userBlocking':
        return 'text-orange-600 bg-orange-100';
      case 'high':
        return 'text-red-600 bg-red-50';
      case 'normal':
        return 'text-blue-600 bg-blue-50';
      case 'low':
        return 'text-gray-600 bg-gray-50';
      case 'idle':
        return 'text-gray-500 bg-gray-25';
      default:
        return 'text-gray-600 bg-gray-50';
    }
  };

  const getPriorityLabel = (priority: string) => {
    switch (priority) {
      case 'immediate':
        return 'Immediate';
      case 'userBlocking':
        return 'UserBlocking';
      case 'high':
        return 'High';
      case 'normal':
        return 'Normal';
      case 'low':
        return 'Low';
      case 'idle':
        return 'Idle';
      default:
        return priority;
    }
  };

  const getBatchColor = (priority: string) => {
    switch (priority) {
      case 'immediate':
        return 'bg-red-100 border-red-300';
      case 'userBlocking':
        return 'bg-orange-100 border-orange-300';
      case 'high':
        return 'bg-red-50 border-red-200';
      case 'normal':
        return 'bg-blue-50 border-blue-200';
      case 'low':
        return 'bg-gray-50 border-gray-200';
      case 'idle':
        return 'bg-gray-25 border-gray-100';
      default:
        return 'bg-gray-50 border-gray-200';
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white/90 rounded-lg p-6 shadow-lg">
        <h3 className="text-xl font-bold text-[#2D2D2D] mb-4">
          –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Fiber —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
        </h3>

        <div className="space-y-4">
          {/* –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã */}
          <div>
            <h4 className="font-semibold text-red-600 mb-2">
              üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
            </h4>
            <div className="flex flex-wrap gap-2">
              <button
                onClick={addImmediateWork}
                className="bg-red-600 hover:bg-red-700 text-white px-3 py-2 rounded-lg transition-colors text-sm"
              >
                Immediate (1)
              </button>
              <button
                onClick={addUserBlockingWork}
                className="bg-orange-500 hover:bg-orange-600 text-white px-3 py-2 rounded-lg transition-colors text-sm"
              >
                UserBlocking (2)
              </button>
            </div>
          </div>

          {/* –û–±—ã—á–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã */}
          <div>
            <h4 className="font-semibold text-blue-600 mb-2">
              üìã –û–±—ã—á–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
            </h4>
            <div className="flex flex-wrap gap-2">
              <button
                onClick={addHighPriorityWork}
                className="bg-[#FF6B6B] hover:bg-[#FF5252] text-white px-3 py-2 rounded-lg transition-colors text-sm"
              >
                High (3)
              </button>
              <button
                onClick={addNormalWork}
                className="bg-[#4ECDC4] hover:bg-[#45B7AA] text-white px-3 py-2 rounded-lg transition-colors text-sm"
              >
                Normal (4)
              </button>
              <button
                onClick={addLowPriorityWork}
                className="bg-[#FF9F43] hover:bg-[#F39C12] text-white px-3 py-2 rounded-lg transition-colors text-sm"
              >
                Low (5)
              </button>
            </div>
          </div>

          {/* –§–æ–Ω–æ–≤—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã */}
          <div>
            <h4 className="font-semibold text-gray-600 mb-2">
              üåô –§–æ–Ω–æ–≤—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
            </h4>
            <div className="flex flex-wrap gap-2">
              <button
                onClick={addIdleWork}
                className="bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-lg transition-colors text-sm"
              >
                Idle (6)
              </button>
            </div>
          </div>

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
          <div className="pt-2 border-t border-gray-200">
            <div className="flex flex-wrap gap-2">
              <button
                onClick={startWork}
                disabled={isWorking}
                className="bg-[#00DBDB] hover:bg-[#00B8B8] disabled:bg-gray-400 text-white px-4 py-2 rounded-lg transition-colors"
              >
                {isWorking ? '–†–∞–±–æ—Ç–∞–µ–º...' : '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'}
              </button>
              <button
                onClick={resetWork}
                className="bg-[#778CA3] hover:bg-[#4B6584] text-white px-4 py-2 rounded-lg transition-colors"
              >
                –°–±—Ä–æ—Å–∏—Ç—å
              </button>
              <button
                onClick={() => setShowDetails(!showDetails)}
                className="bg-[#FFE66D] hover:bg-[#FFD93D] text-[#2D2D2D] px-4 py-2 rounded-lg transition-colors"
              >
                {showDetails ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –¥–µ—Ç–∞–ª–∏
              </button>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
          <div>
            <h4 className="font-semibold text-[#2D2D2D] mb-3">Fiber —É–∑–ª—ã:</h4>
            <div className="space-y-2">
              {fiberNodes.map((node) => (
                <div
                  key={node.id}
                  className={`p-3 rounded-lg border-2 ${
                    currentWork === node.id
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-200'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <span className="font-semibold">{node.type}</span>
                      <span
                        className={`ml-2 px-2 py-1 rounded text-xs ${getPriorityColor(node.priority)}`}
                      >
                        {getPriorityLabel(node.priority)}
                      </span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div
                        className={`w-3 h-3 rounded-full ${getStateColor(node.state)}`}
                      ></div>
                      <span className="text-sm text-gray-600">
                        {node.state}
                      </span>
                    </div>
                  </div>
                  {showDetails && (
                    <div className="mt-2 text-xs text-gray-500">
                      <div>ID: {node.id}</div>
                      <div>
                        Work in progress: {node.workInProgress ? 'Yes' : 'No'}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          <div className="space-y-4">
            <div>
              <h4 className="font-semibold text-[#2D2D2D] mb-3">
                –¢–µ–∫—É—â–∏–π –±–∞—Ç—á:
              </h4>
              {currentBatch.length > 0 ? (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                  <div className="text-sm font-semibold text-blue-700 mb-2">
                    üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ({currentBatch.length} –∑–∞–¥–∞—á):
                  </div>
                  <div className="space-y-1">
                    {currentBatch.map((task, index) => (
                      <div key={index} className="text-sm text-blue-600">
                        ‚Ä¢ {task}
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-3 text-gray-500 text-sm">
                  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞—Ç—á–∞
                </div>
              )}
            </div>

            <div>
              <h4 className="font-semibold text-[#2D2D2D] mb-3">
                –ò—Å—Ç–æ—Ä–∏—è –±–∞—Ç—á–µ–π:
              </h4>
              <div className="space-y-2 max-h-40 overflow-y-auto">
                {batchHistory.length > 0 ? (
                  batchHistory.map((batch, index) => (
                    <div
                      key={index}
                      className={`border rounded-lg p-2 ${getBatchColor(batch.priority)}`}
                    >
                      <div className="text-xs font-semibold text-gray-700 mb-1">
                        ‚úÖ {getPriorityLabel(batch.priority)} –±–∞—Ç—á (
                        {batch.completed} –∑–∞–¥–∞—á)
                      </div>
                      <div className="text-xs text-gray-600">
                        {batch.batch.join(', ')}
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="text-gray-500 text-sm">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>
                )}
              </div>
            </div>

            <div>
              <h4 className="font-semibold text-[#2D2D2D] mb-3">–°–æ—Å—Ç–æ—è–Ω–∏–µ:</h4>
              <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm">
                <div className="mb-2">// Fiber Work Loop —Å –±–∞—Ç—á–∏–Ω–≥–æ–º</div>
                <div className="text-blue-400">
                  {isWorking ? (
                    <>
                      <div>üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞</div>
                      <div>üì¶ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º</div>
                      <div>‚ö° –ú–æ–∂–µ–º –ø—Ä–µ—Ä–≤–∞—Ç—å –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏</div>
                      <div>
                        üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: Immediate &gt; UserBlocking &gt; High
                        &gt; Normal &gt; Low &gt; Idle
                      </div>
                    </>
                  ) : (
                    <>
                      <div>‚úÖ –í—Å–µ –±–∞—Ç—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã</div>
                      <div>üéØ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–¥–∞—á–∞–º</div>
                      <div>‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥</div>
                    </>
                  )}
                </div>
                <div className="mt-2 text-yellow-400">
                  // –ë–∞—Ç—á–∏–Ω–≥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è Fiber –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
const FiberExplanation = () => {
  const [step, setStep] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);

  const steps = [
    {
      title: '1. Fiber Node',
      description:
        '–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç React –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ Fiber —É–∑–µ–ª —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π',
      code: `interface Fiber {
  type: any;           // –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
  key: string;         // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
  stateNode: any;      // –°—Å—ã–ª–∫–∞ –Ω–∞ DOM —É–∑–µ–ª
  return: Fiber;       // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª
  child: Fiber;        // –ü–µ—Ä–≤—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª
  sibling: Fiber;      // –°–ª–µ–¥—É—é—â–∏–π –±—Ä–∞—Ç—Å–∫–∏–π —É–∑–µ–ª
  alternate: Fiber;    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —É–∑–µ–ª
  effectTag: number;   // –¢–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞
  expirationTime: number; // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
}`,
    },
    {
      title: '2. Work Loop',
      description: 'Fiber –º–æ–∂–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞–±–æ—Ç—É',
      code: `function workLoop() {
  while (workInProgress !== null) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É
    if (shouldYield()) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä—É
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
    performUnitOfWork(workInProgress);
  }
}`,
    },
    {
      title: '3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã',
      description: '–†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã',
      code: `const Priorities = {
  Immediate: 1,    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  UserBlocking: 2, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
  Normal: 3,       // –û–±—ã—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  Low: 4,          // –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
  Idle: 5          // –ù–µ–≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏
};`,
    },
    {
      title: '4. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è',
      description:
        'Fiber –º–æ–∂–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á',
      code: `// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–Ω—É–ª –∫–Ω–æ–ø–∫—É
// Fiber –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç—É
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ

// –≠—Ç–æ –¥–µ–ª–∞–µ—Ç React –±–æ–ª–µ–µ –æ—Ç–∑—ã–≤—á–∏–≤—ã–º!`,
    },
  ];

  //   const nextStep = () => {
  //     setIsAnimating(true);
  //     setTimeout(() => {
  //       setStep((prev) => (prev + 1) % steps.length);
  //       setIsAnimating(false);
  //     }, 300);
  //   };

  // –∞–≤—Ç–æ–ø–ª–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  // useEffect(() => {
  //   const interval = setInterval(nextStep, 7000);
  //   return () => clearInterval(interval);
  // }, []);

  return (
    <div className="bg-white/90 rounded-lg p-6 shadow-lg">
      <h3 className="text-xl font-bold text-[#2D2D2D] mb-4">
        –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Fiber
      </h3>

      <div
        className={`transition-opacity duration-300 ${isAnimating ? 'opacity-50' : 'opacity-100'}`}
      >
        <h4 className="font-semibold text-[#00DBDB] mb-2">
          {steps[step].title}
        </h4>
        <p className="text-[#2D2D2D] mb-4">{steps[step].description}</p>

        <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm overflow-x-auto">
          <pre>{steps[step].code}</pre>
        </div>
      </div>

      <div className="flex justify-center mt-4 space-x-2">
        {steps.map((_, index) => (
          <button
            key={index}
            onClick={() => setStep(index)}
            className={`w-3 h-3 rounded-full transition-colors ${
              index === step ? 'bg-[#00DBDB]' : 'bg-gray-300'
            }`}
          />
        ))}
      </div>
    </div>
  );
};

export const Fiber = () => {
  return (
    <div className="min-h-screen pt-24">
      <div className="max-w-[1200px] mx-auto px-6">
        <div className="w-full bg-gradient-to-r from-[#AEAEAE]/80 via-[#AEAEAE]/40 to-transparent rounded-xl py-8 px-6 relative">
          <div className="text-center mb-8">
            <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold text-[#2D2D2D] mb-4">
              React <span className="text-[#00DBDB]">Fiber</span>
            </h1>
            <p className="text-lg max-w-2xl mx-auto text-[#2D2D2D]">
              –ò–∑—É—á–∏—Ç–µ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É React, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –∏
              –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞–±–æ—Ç—É –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            </p>
            <div className="mt-6">
              <a
                href="/#/reconciliation"
                className="inline-block bg-[#FF6B6B] hover:bg-[#FF5252] text-white px-6 py-3 rounded-lg transition-colors"
              >
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ Reconciliation
              </a>
            </div>
          </div>

          {/* Floating React logo */}
          <div className="hidden xl:block absolute top-8 right-8 animate-bounce">
            <img
              src={ReacktImg}
              alt="React"
              className="w-16 h-16 object-contain"
            />
          </div>

          {/* Main content */}
          <div className="space-y-8">
            <FiberDemo />
            <FiberExplanation />

            {/* Key concepts */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-white/90 rounded-lg p-6 shadow-lg">
                <h3 className="text-lg font-bold text-[#2D2D2D] mb-3">
                  –ü—Ä–µ—Ä—ã–≤–∞–µ–º–æ—Å—Ç—å
                </h3>
                <p className="text-[#2D2D2D] text-sm">
                  Fiber –º–æ–∂–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ—ë
                  –ø–æ–∑–∂–µ, –Ω–µ —Ç–µ—Ä—è—è –ø—Ä–æ–≥—Ä–µ—Å—Å
                </p>
              </div>

              <div className="bg-white/90 rounded-lg p-6 shadow-lg">
                <h3 className="text-lg font-bold text-[#2D2D2D] mb-3">
                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
                </h3>
                <p className="text-[#2D2D2D] text-sm">
                  –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç
                  React –±—ã—Ç—å –±–æ–ª–µ–µ –æ—Ç–∑—ã–≤—á–∏–≤—ã–º
                </p>
              </div>

              <div className="bg-white/90 rounded-lg p-6 shadow-lg">
                <h3 className="text-lg font-bold text-[#2D2D2D] mb-3">
                  –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ—Å—Ç—å
                </h3>
                <p className="text-[#2D2D2D] text-sm">
                  –†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —á–∞—Å—Ç—è–º, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—Ä–∞—É–∑–µ—Ä—É
                  –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                </p>
              </div>
            </div>

            {/* Benefits */}
            <div className="bg-white/90 rounded-lg p-6 shadow-lg">
              <h3 className="text-xl font-bold text-[#2D2D2D] mb-4">
                –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Fiber
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold text-[#00DBDB] mb-2">
                    üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
                  </h4>
                  <ul className="text-[#2D2D2D] text-sm space-y-1">
                    <li>‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥</li>
                    <li>‚Ä¢ –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫</li>
                    <li>‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU</li>
                    <li>‚Ä¢ –õ—É—á—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤</li>
                  </ul>
                </div>
                <div>
                  <h4 className="font-semibold text-[#4ECDC4] mb-2">
                    üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç:
                  </h4>
                  <ul className="text-[#2D2D2D] text-sm space-y-1">
                    <li>‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</li>
                    <li>‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</li>
                    <li>‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ</li>
                    <li>‚Ä¢ –õ—É—á—à–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</li>
                  </ul>
                </div>
              </div>
            </div>

            {/* Comparison */}
            <div className="bg-white/90 rounded-lg p-6 shadow-lg">
              <h3 className="text-xl font-bold text-[#2D2D2D] mb-4">
                –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: Stack vs Fiber
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold text-[#FF6B6B] mb-2">
                    ‚ùå Stack (—Å—Ç–∞—Ä–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞):
                  </h4>
                  <ul className="text-[#2D2D2D] text-sm space-y-1">
                    <li>‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞</li>
                    <li>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</li>
                    <li>‚Ä¢ –ù–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤</li>
                    <li>‚Ä¢ –ü–ª–æ—Ö–∞—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å</li>
                  </ul>
                </div>
                <div>
                  <h4 className="font-semibold text-[#00DBDB] mb-2">
                    ‚úÖ Fiber (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞):
                  </h4>
                  <ul className="text-[#2D2D2D] text-sm space-y-1">
                    <li>‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞</li>
                    <li>‚Ä¢ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</li>
                    <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤</li>
                    <li>‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å</li>
                  </ul>
                </div>
              </div>
            </div>

            {/* Use cases */}
            <div className="bg-white/90 rounded-lg p-6 shadow-lg">
              <h3 className="text-xl font-bold text-[#2D2D2D] mb-4">
                –ö–æ–≥–¥–∞ Fiber –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω
              </h3>
              <div className="space-y-4">
                <div className="flex items-center space-x-4">
                  <div className="w-8 h-8 bg-[#00DBDB] rounded-full flex items-center justify-center text-white font-bold">
                    1
                  </div>
                  <div>
                    <h4 className="font-semibold text-[#2D2D2D]">
                      –ë–æ–ª—å—à–∏–µ —Å–ø–∏—Å–∫–∏
                    </h4>
                    <p className="text-[#2D2D2D] text-sm">
                      –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç—ã—Å—è—á —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    </p>
                  </div>
                </div>
                <div className="flex items-center space-x-4">
                  <div className="w-8 h-8 bg-[#00DBDB] rounded-full flex items-center justify-center text-white font-bold">
                    2
                  </div>
                  <div>
                    <h4 className="font-semibold text-[#2D2D2D]">
                      –°–ª–æ–∂–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                    </h4>
                    <p className="text-[#2D2D2D] text-sm">
                      –ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                    </p>
                  </div>
                </div>
                <div className="flex items-center space-x-4">
                  <div className="w-8 h-8 bg-[#00DBDB] rounded-full flex items-center justify-center text-white font-bold">
                    3
                  </div>
                  <div>
                    <h4 className="font-semibold text-[#2D2D2D]">
                      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
                    </h4>
                    <p className="text-[#2D2D2D] text-sm">
                      –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∫–ª–∏–∫–∏, —Å–∫—Ä–æ–ª–ª, –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
                    </p>
                  </div>
                </div>
                <div className="flex items-center space-x-4">
                  <div className="w-8 h-8 bg-[#00DBDB] rounded-full flex items-center justify-center text-white font-bold">
                    4
                  </div>
                  <div>
                    <h4 className="font-semibold text-[#2D2D2D]">
                      –§–æ–Ω–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                    </h4>
                    <p className="text-[#2D2D2D] text-sm">
                      –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
